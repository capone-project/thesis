== Architecture ==

    - how to guarantee host security?

    - computing nodes?
        - applications cannot interfere with each other
        - many-to-many relation between nodes/slaves
        - capabilities request features
        - secure windowing system required
            - input focus important
        - IPC?
            - requires notion of who is accepted to interact with
              oneself

    - encryption between slave nodes
        - host is ONLY there for matchmaking
        - host CANNOT possibly know about contents between nodes

    - graphics
        - graphics representation on host system
        - input system on host system
        - slave only display host
        - HDCP

    - benefits:
        - hardware cannot ever possibly communicate over internet

== Implementation ==

    - host/arbitrer
        - secure system
        - representation of windows
        - representation of hardware
    - all clients
        - operating system is not important
        - daemon on well-known port
        - daemon stores table of cryptographic keys
        - daemon stores table of services
        - talks pre-defined protocol
            - has to be simple in order not to introduce parsing
              malfunctions
    - app clients
        - Xvfb?
        - persistent state?
        - configugration file specifying what to run and what
          devices are requested
    - hardware clients
        - special drivers
        - stateless is preferable when possible
        - storage
            - clients may store data encrypted
        - display
            - separate protocol for display<->arbitrer
              communication

== Questions ==

    - representation of origin of devices/apps
    - consistent user representation on storage devices
        - user-specific disks?
    - preventing MITM attacks
        - directory services
    - porting existing applications
        - override symbols with LD_PRELOAD
